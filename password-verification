import cv2
import smtplib
import ssl
import random
import keyboard
from email.message import EmailMessage
import tkinter as tk
import threading

# Your security passwords
CORRECT_PASSWORD = "236246"
OTP = None

SENDER_EMAIL = "jriswan207@gmail.com"
SENDER_APP_PASSWORD = "hzwy vmix uqun mleo"
RECEIVER_EMAIL = "jriswan236@gmail.com"

def capture_intruder_photo():
    cam = cv2.VideoCapture(0)
    ret, frame = cam.read()
    photo_path = "intruder.jpg"
    if ret:
        cv2.imwrite(photo_path, frame)
    cam.release()
    return photo_path

def send_email(subject, content):
    msg = EmailMessage()
    msg['Subject'] = subject
    msg['From'] = SENDER_EMAIL
    msg['To'] = RECEIVER_EMAIL
    msg.set_content(content)

    context = ssl.create_default_context()
    with smtplib.SMTP_SSL('smtp.gmail.com', 465, context=context) as server:
        server.login(SENDER_EMAIL, SENDER_APP_PASSWORD)
        server.send_message(msg)

def send_email_with_photo(photo_path):
    msg = EmailMessage()
    msg['Subject'] = "ðŸš¨ ALERT: Suspicious Key Press Detected ðŸš¨"
    msg['From'] = SENDER_EMAIL
    msg['To'] = RECEIVER_EMAIL
    msg.set_content("Alert! Someone tried to press Ctrl/Alt/Shift. See attached photo.")

    with open(photo_path, 'rb') as f:
        img_data = f.read()
        msg.add_attachment(img_data, maintype='image', subtype='jpeg', filename='intruder.jpg')

    context = ssl.create_default_context()
    with smtplib.SMTP_SSL('smtp.gmail.com', 465, context=context) as server:
        server.login(SENDER_EMAIL, SENDER_APP_PASSWORD)
        server.send_message(msg)

def generate_and_send_otp():
    global OTP
    OTP = str(random.randint(100000, 999999))
    send_email("Your Backup OTP", f"Your OTP to unlock the system is: {OTP}")

def monitor_keypress():
    while True:
        # Detect if Ctrl, Alt, or Shift is pressed
        if keyboard.is_pressed('ctrl') or keyboard.is_pressed('alt') or keyboard.is_pressed('shift'):
            photo = capture_intruder_photo()
            send_email_with_photo(photo)

def check_password():
    entered = password_entry.get()

    if entered == CORRECT_PASSWORD:
        root.destroy()
    elif entered == OTP:
        root.destroy()
    else:
        photo = capture_intruder_photo()
        send_email_with_photo(photo)
        message_label.config(text="Wrong Password! Alert sent.")

def forgot_password():
    generate_and_send_otp()
    root.withdraw()

    otp_window = tk.Toplevel()
    otp_window.attributes('-fullscreen', True)
    otp_window.protocol("WM_DELETE_WINDOW", lambda: None)
    otp_window.bind('<Alt-F4>', lambda e: None)

    tk.Label(otp_window, text="ðŸ“§ Enter OTP sent to your email", font=('Arial', 30)).pack(pady=50)

    otp_entry = tk.Entry(otp_window, font=('Arial', 24))
    otp_entry.pack(pady=20)

    otp_message_label = tk.Label(otp_window, text="", font=('Arial', 20), fg='red')
    otp_message_label.pack(pady=20)

    def check_otp():
        entered_otp = otp_entry.get()
        global OTP

        if entered_otp == OTP:
            otp_window.destroy()
            root.destroy()
        else:
            photo = capture_intruder_photo()
            send_email_with_photo(photo)
            otp_message_label.config(text="Wrong OTP! Alert photo sent.")

    tk.Button(otp_window, text="Submit OTP", command=check_otp, font=('Arial', 24)).pack(pady=20)

# Start keypress monitoring in background thread
keypress_thread = threading.Thread(target=monitor_keypress, daemon=True)
keypress_thread.start()

# Main Lock Screen GUI
root = tk.Tk()
root.attributes('-fullscreen', True)
root.protocol("WM_DELETE_WINDOW", lambda: None)
root.bind('<Alt-F4>', lambda e: None)

tk.Label(root, text="ðŸ”’ Enter Security Password", font=('Arial', 30)).pack(pady=50)

password_entry = tk.Entry(root, show="*", font=('Arial', 24))
password_entry.pack(pady=20)

tk.Button(root, text="Unlock", command=check_password, font=('Arial', 24)).pack(pady=20)
tk.Button(root, text="Forgot Password?", command=forgot_password, font=('Arial', 18)).pack(pady=10)

message_label = tk.Label(root, text="", font=('Arial', 20), fg='red')
message_label.pack(pady=20)

root.mainloop()



#hzwy vmix uqun mleo
